trigger: none
pr:
  autoCancel: true
  drafts: false

name: 📝 Convert Markdown

variables:
  FIRST_CHANGE_DESCRIPTION: Initial draft
  FOLDER: docs
  GIT_LOG_LIMIT: 15
  HISTORY_FILE:
  MAIN_AUTHOR: Innofactor
  ORDER_FILE: document.order
  OUT_FILE: document.pdf
  PROJECT:
  REPLACE_FILE:
  SKIP_GIT_COMMIT_HISTORY: false
  SUBTITLE: Design Document
  TITLE: DNS
  WORKFLOW_VERSION: v3.0.2beta1

pool:
  vmImage: ubuntu-22.04

steps:
  - checkout: self
    displayName: Checkout
    fetchDepth: 0

  - task: Cache@2
    displayName: Cache Fonts
    inputs:
      key: 'fonts | "$(Agent.OS)"'
      path: /usr/share/fonts

  - task: Cache@2
    displayName: Cache TeX Live
    inputs:
      key: 'texlive | "$(Agent.OS)"'
      path: /opt/texlive

  - task: Cache@2
    displayName: Cache pip
    inputs:
      key: 'pip | "$(Agent.OS)"'
      path: $(Pipeline.Workspace)/.pip

  - task: Bash@3
    displayName: Install tools
    env:
      SCRIPT: install-tools
      VERSION: ${{ variables.WORKFLOW_VERSION }}
      pip_cache_dir: $(Pipeline.Workspace)/.pip
    inputs:
      targetType: inline
      script: |
        files=(
          "${SCRIPT}.sh"
          texlive.profile
          texlive_packages.txt
          requirements.txt
        )
        for file in "${files[@]}"; do
          url="https://github.com/innofactororg/markdown2pdf/raw/${VERSION}/tools/${file}"
          echo "Download ${url}"
          HTTP_CODE=$(wget --tries=3 --server-response \
            --no-check-certificate --quiet ${url} 2>&1 | \
            awk '/^  HTTP/{print $2}' | tail -1 || true
          )
          if [ "${HTTP_CODE}" -lt 200 ] || [ "${HTTP_CODE}" -gt 299 ]; then
            echo "##[error]Unable to get ${file}! Response code: ${HTTP_CODE}"
            exit 1
          fi
        done
        chmod +x "${SCRIPT}.sh"
        ./"${SCRIPT}.sh"

  - task: Bash@3
    displayName: Build PDF
    env:
      AUTHOR: ${{ variables.MAIN_AUTHOR }}
      DESCRIPTION: ${{ variables.FIRST_CHANGE_DESCRIPTION }}
      SKIP_GIT_HISTORY: ${{ variables.SKIP_GIT_COMMIT_HISTORY }}
      HISTORY: ${{ variables.HISTORY_FILE }}
      LIMIT: ${{ variables.GIT_LOG_LIMIT }}
      SCRIPT: convert
      VERSION: ${{ variables.WORKFLOW_VERSION }}
    inputs:
      targetType: inline
      script: |
        files=(
          "${SCRIPT}.sh"
          designdoc.tex
          designdoc-cover.png
          designdoc-logo.png
        )
        for file in "${files[@]}"; do
          url="https://github.com/innofactororg/markdown2pdf/raw/${VERSION}/tools/${file}"
          echo "Download ${url}"
          HTTP_CODE=$(wget --tries=3 --server-response \
            --no-check-certificate --quiet ${url} 2>&1 | \
            awk '/^  HTTP/{print $2}' | tail -1 || true
          )
          if [ "${HTTP_CODE}" -lt 200 ] || [ "${HTTP_CODE}" -gt 299 ]; then
            echo "##[error]Unable to get ${file}! Response code: ${HTTP_CODE}"
            exit 1
          fi
        done
        git config --global --add safe.directory '*'
        chmod +x "${SCRIPT}.sh"
        ./"${SCRIPT}.sh" -a "${AUTHOR}" -d "${DESCRIPTION}" -f "${FOLDER}" \
          -force "${SKIP_GIT_HISTORY}" -h "${HISTORY}" -l "${LIMIT}" \
          -o "${ORDER_FILE}" -out "${OUT_FILE}" -p "${PROJECT}" \
          -r "${REPLACE_FILE}" -s "${SUBTITLE}" -t "${TITLE}" \
          --template "designdoc"

  - task: PublishPipelineArtifact@1
    displayName: Publish PDF
    inputs:
      targetPath: $(Build.SourcesDirectory)/${{ variables.OUT_FILE }}
      artifact: ${{ variables.OUT_FILE }}
      publishLocation: pipeline
